cmake化作業を試みて分かった事項

記法
<SPR> Springheadeをcloneしたdirectory
<APP> Applicationのメインdirectory

一般論
<APP>の構成が
<APP>/main.cpp
     /CMakeLists.txt
     /<PROJ>
     /<PROJ>/proj*.cpp
     /<PROJ>/CMakeLists.txt
であるとし、CMakeLists.txtには
    add_subdirectory(<PROJ> <PROJ>-binary-out)
があるものとする。

ここで
　> mkdir build		# 作業領域
  > cd build
  > cmake [option] .. -G generator
を実行すると、
  <APP>/build/<APP>.sln
             /<APP>.vcxproj
             /<APP>.dir				# <APP>の中間生成物はここに作られる
             /CMakeFiles/generate.timestamp
             /<PROJ>/<PROJ>.vcxproj
             /<PROJ>/<PROJ>.dir			# <PROJ>の中間生成物はここに作られる
             /<PROJ>/CMakeFiles/generate.timestamp
が生成される。
generate.timestampのfile timeがcmake (configure) された時刻を示す。

問題点

(P1) <APP>と<SPR>の開発とを同時には行なわない場合
	<APP>からはSpringheadのlibrary fileを参照するだけとすれば問題は起きない。
	この場合、<APP>/CMakeLists.txtには
	    target_link_directories(${TARGET} .../libdir)
	    target_link_libraries(${TARGET} xxx.lib yyy.lib)
	を記述することになる。

(P2) <APP>と<SPR>の開発とを同時には行なう場合
	この場合には、Springhead projectはソースレベルで取り込まないといけない。
	つまり、<PROJ>がSpringheadのprojectの場合である。

	Visual Studioでは、<SPR>下にある<PROJ>.vcxprojを直接参照することで
	<PROJ>を取り込むが、cmakeでは、cmake (configure)コマンドが実行された時点で
	ソース及び依存ファイルを走査して.vcxprojファイルを生成する。
	たとえCMakeLists.txtのadd_subdirectoryが<SPR>の<PROJ>を指定していたとしても
	cmakeで生成され<APP>.slnから参照されるのは<APP>下の<PROJ>.vcxproj
	であり、これは<SPR>下の<PROJ>.vcxprojとは別物である。

	このことは、<SPR>の<PROJ>にファイル構成の変更があった場合には<SPR>で再度
	cmakeをするだけでは<APP>には何も反映されないことを意味している【問題点１】。
	
	また、中間生成物を格納するディレクトリが<APP>/buildの下にあることから、
	<SPR>,<APP1>,...,<APPn>でビルドの最適化が別個に行なわれ、全体として無駄な
	ビルドが発生することになる【問題点２】。

	さらに、cmakeを実行すると無条件でgenerate.timestampが更新されるためかどうか
	定かではないが、無駄なビルドが発生する【問題点３】。

対応策

(C1) 【問題点１】に対しては、今の所良い対応策は考えつかない。

　　《対応策？》
	<SPR>の開発と<APP>の開発とを分離して、<APP>からは<SPR>のlibrary fileだけを
	参照するようにする。この場合libraryを修正すると、<SPR>でcmakeしてビルド、
	次に<APP>でcmakeしてビルドの手順が必要となる。
	この場合、かなり無駄な作業と時間が発生することになる。

(C2) 【問題点２】に対しては、次のことを試してみた。
	<SPR>の各<PROJ>について、cmake時に<SPR>下の適当な場所に<PROJ>.dirという
	ディレクトリを作成してbuild/<PROJ>/<PROJ>.dirからここへリンク(junction)を
	張って<PROJ>.dirを統合した。
	これで中間生成物が複数できることは回避できたが、相変わらず無駄なビルドが発生
	している。【問題点３】と関連しているかも知れない。

	























